name: Check

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          repository: bitcoinfuzz/bitcoinfuzz
          path: bitcoinfuzz
          submodules: recursive

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable

      - uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - run: |
          python -m pip install --upgrade pip
          pip install -r bitcoinfuzz/modules/embit/requirements.txt
          pip install mako

      - name: Install LLVM and Clang - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo ln -sfT clang++-18 /usr/bin/clang++
          sudo ln -sfT clang-18 /usr/bin/clang

      - name: Cache LLVM Homebrew - macOS
        if: matrix.os == 'macos-14'
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: |
            /opt/homebrew/Cellar/llvm@18
            /opt/homebrew/lib/llvm@18
          key: brew-llvm-18-${{ runner.os }}-${{ runner.arch }}
          restore-keys: |
            brew-llvm-18-${{ runner.os }}-

      - name: Install LLVM and Clang - macOS
        if: matrix.os == 'macos-14' && steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          brew install llvm@18

      - name: Setup Compiler Env - macOS
        if: matrix.os == 'macos-14'
        run: |
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Install build dependencies - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install autoconf gnu-sed automake libtool gettext pkg-config protobuf libsodium

      - name: Setup Compiler Env - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Build All Modules
        timeout-minutes: 20
        run: |
          rustup default nightly
          cd bitcoinfuzz/modules

          (cd bitcoin && make) &
          (cd custommutator && make) &
          (cd btcd && make) &
          (cd embit && make) &
          (cd lnd && make) &
          (cd nlightning && make) &
          (cd clightning && make) &
          (cd rustbitcoin && make cargo && make) &
          (cd rustminiscript && make cargo && make) &
          (cd ldk && make cargo && make) &

          # Wait for all background jobs
          wait
        shell: bash

      - name: Cache build artifacts
        uses: actions/cache/save@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

  test-script:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: script
          cxxflags: "-DBITCOIN_CORE -DRUST_BITCOIN"

  test-deserialize-block:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: deserialize_block
          cxxflags: "-DBITCOIN_CORE -DRUST_BITCOIN -DBTCD"

  test-script-eval:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: script_eval
          cxxflags: "-DBITCOIN_CORE -DBTCD"

  test-descriptor-parse:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: descriptor_parse
          cxxflags: "-DBITCOIN_CORE -DRUST_MINISCRIPT"
          asan-disable-leaks: "true"

  test-miniscript-parse:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: miniscript_parse
          cxxflags: "-DBITCOIN_CORE -DRUST_MINISCRIPT"
          asan-disable-leaks: "true"

  test-script-asm:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: script_asm
          cxxflags: "-DBITCOIN_CORE -DBTCD"

  test-address-parse:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: address_parse
          cxxflags: "-DBITCOIN_CORE -DRUST_BITCOIN"

  test-psbt-parse:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: psbt_parse
          cxxflags: "-DRUST_BITCOIN -DBTCD"
          asan-disable-leaks: "true"

  test-deserialize-invoice:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: deserialize_invoice
          cxxflags: "-DLDK -DLND -DCLIGHTNING -DCUSTOM_MUTATOR_BOLT11"
          asan-disable-leaks: "true"

  test-deserialize-offer:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-job
        with:
          fuzz-target: deserialize_invoice
          cxxflags: "-DLDK -DCLIGHTNING -DCUSTOM_MUTATOR_BOLT12_OFFER"
          asan-disable-leaks: "true"
