name: Check

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Checkout bitcoinfuzz repo
        uses: actions/checkout@v4
        with:
          repository: bitcoinfuzz/bitcoinfuzz
          path: bitcoinfuzz
          submodules: recursive

      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: rust-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-${{ runner.os }}-

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable

      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Install .NET SDK with cache
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
          cache: true

      - name: Setup Python and install embit
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          pip install -r bitcoinfuzz/modules/embit/requirements.txt
          pip install mako

      - name: Install LLVM and Clang - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo ln -sfT clang++-18 /usr/bin/clang++
          sudo ln -sfT clang-18 /usr/bin/clang
        shell: bash

      - name: Install LLVM and Clang - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Install build dependencies - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install autoconf gnu-sed automake libtool gettext pkg-config protobuf libsodium

      - name: Setup common environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup common environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Build - Bitcoin Core
        timeout-minutes: 40
        run: |
          if [ "${{ matrix.os }}" == "macos-14" ]; then
            export PATH="/usr/local/opt/autoconf/bin:/usr/local/opt/automake/bin:/usr/local/opt/libtool/bin:$PATH"
          fi
          cd bitcoinfuzz/modules/bitcoin && make

      - name: Build - custommutator
        timeout-minutes: 40
        run: |
          cd bitcoinfuzz/modules/custommutator && make

      - name: Build - rust bitcoin
        timeout-minutes: 5
        run: |
          rustup default nightly
          cd bitcoinfuzz/modules/rustbitcoin && make cargo && make

      - name: Build - rust miniscript
        timeout-minutes: 5
        run: |
          rustup default nightly
          cd bitcoinfuzz/modules/rustminiscript && make cargo && make

      - name: Build - btcd
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/btcd && make

      - name: Build - embit
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/embit && make

      - name: Build - lnd
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/lnd && make

      - name: Build - ldk
        timeout-minutes: 5
        run: |
          rustup default nightly
          cd bitcoinfuzz/modules/ldk && make cargo && make

      - name: Build - nlightning
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/nlightning && make

      - name: Build - clightning
        timeout-minutes: 5
        run: |
          cd bitcoinfuzz/modules/clightning && make

      - name: Cache build artifacts
        uses: actions/cache/save@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

  # Individual test jobs
  test-script:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - script
        timeout-minutes: 5
        run: |
          if [ -d "./script" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DBITCOIN_CORE -DRUST_BITCOIN"
            make
            echo "Using corpora for script"
            FUZZ=script ./bitcoinfuzz -runs=1 ../script
          fi

  test-deserialize-block:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - deserialize_block
        timeout-minutes: 5
        run: |
          if [ -d "./deserialize_block" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DBITCOIN_CORE -DRUST_BITCOIN -DBTCD"
            make
            echo "Using corpora for deserialize_block"
            FUZZ=deserialize_block ./bitcoinfuzz -runs=1 ../deserialize_block
          fi

  test-script-eval:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - script_eval
        timeout-minutes: 5
        run: |
          if [ -d "./script_eval" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DBITCOIN_CORE -DBTCD"
            make
            echo "Using corpora for script_eval"
            FUZZ=script_eval ./bitcoinfuzz -runs=1 ../script_eval
          fi

  test-descriptor-parse:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - descriptor_parse
        timeout-minutes: 5
        run: |
          if [ -d "./descriptor_parse" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DBITCOIN_CORE -DRUST_MINISCRIPT"
            make
            echo "Using corpora for descriptor_parse"
            ASAN_OPTIONS=detect_leaks=0 FUZZ=descriptor_parse ./bitcoinfuzz -runs=1 ../descriptor_parse
          fi

  test-miniscript-parse:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - miniscript_parse
        run: |
          if [ -d "./miniscript_parse" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DBITCOIN_CORE -DRUST_MINISCRIPT"
            make
            echo "Using corpora for miniscript_parse"
            ASAN_OPTIONS=detect_leaks=0 FUZZ=miniscript_parse ./bitcoinfuzz -runs=1 ../miniscript_parse
          fi

  test-script-asm:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - script_asm
        run: |
          if [ -d "./script_asm" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DBITCOIN_CORE -DBTCD"
            make
            echo "Using corpora for script_asm"
            FUZZ=script_asm ./bitcoinfuzz -runs=1 ../script_asm
          fi

  test-address-parse:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - address_parse
        run: |
          if [ -d "./address_parse" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DBITCOIN_CORE -DRUST_BITCOIN"
            make
            echo "Using corpora for address_parse"
            FUZZ=address_parse ./bitcoinfuzz -runs=1 ../address_parse
          fi

  test-psbt-parse:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - psbt_parse
        run: |
          if [ -d "./psbt_parse" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DRUST_BITCOIN -DBTCD"
            make
            echo "Using corpora for psbt_parse"
            ASAN_OPTIONS=detect_leaks=0 FUZZ=psbt_parse ./bitcoinfuzz -runs=1 ../psbt_parse
          fi

  test-deserialize-invoice:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - deserialize_invoice
        run: |
          if [ -d "./deserialize_invoice" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DLDK -DLND -DCLIGHTNING -DCUSTOM_MUTATOR_BOLT11"
            (cd ./modules/bitcoin && make clean)
            make
            echo "Using corpora for deserialize_invoice"
            ASAN_OPTIONS=detect_leaks=0 FUZZ=deserialize_invoice ./bitcoinfuzz -runs=1 ../deserialize_invoice
          fi

  test-deserialize-offer:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: bitcoinfuzz
          key: bitcoinfuzz-build-${{ matrix.os }}-${{ github.sha }}

      - name: Setup environment - Ubuntu
        if: matrix.os == 'ubuntu-24.04'
        run: |
          echo "CC=/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV

      - name: Setup environment - macOS
        if: matrix.os == 'macos-14'
        run: |
          brew install llvm@18
          echo "$(brew --prefix llvm@18)/bin" >> $GITHUB_PATH
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV

      - name: Test - deserialize_offer
        run: |
          if [ -d "./deserialize_offer" ]; then
            cd bitcoinfuzz
            export CXXFLAGS="-DLDK -DCLIGHTNING"
            make
            echo "Using corpora for deserialize_offer"
            ASAN_OPTIONS=detect_leaks=0 FUZZ=deserialize_offer ./bitcoinfuzz -runs=1 ../deserialize_offer
          fi
